extends layout

block content
    head 
        link(rel='stylesheet', href='/stylesheets/recipe-style.css')
    include header.pug

    if recipe == null
        h1 RECIPE ID NOT FOUND (RECIPE IS NULL).
    body 
        .outerwrapper 
            .leftwrapper 
                .recipetitle 
                    h1 #{recipe.Title}

                    if (user != null) && (user.name == recipe.UserName)
                        h3 by you!
                    else if recipe.UserName == null || ""
                        h3 by someone? (name is null)
                    else 
                        h3 by #{recipe.UserName}

                .recipelabel
                    h2 Labels
                    h4 #{recipe.Label1}
                    h4 #{recipe.Label2}
                    h4 #{recipe.Label3}

                .recipedescription 
                    h2 About
                    p #{recipe.Description}

                .recipeingredients 
                    h2 Ingredients

                    each ingredient in recipe.Ingredients
                        li #{ingredient}

                .recipemethod 
                    h2 Method
                    p #{recipe.Method}

            .rightwrapper 
                .recipeheader 
                    //This is an empty string. Not great but the easiest way to get the two 
                    //columns to line up :)
                    h1 ‎‎‎‎‏‏‎ 
                a.recipewrapper(href="/updateRecipes/"+recipe.id)
                    .newrecipebutton 
                        p Update Recipes
                .timer 
                    #js-clock.clock
                        span#timer-hours 00
                        span.separator :
                        span#timer-minutes 00
                        span.separator :
                        span#timer-seconds 00
                    form
                        label(for='hours') Hours:
                        input#hours(type='number' name='hours' min='0' max='24')
                        label(for='minutes') Minutes:
                        input#minutes(type='number' name='minutes' min='0' max='60')
                    button#js-btn.main-button(data-action='start')
                        | Start
    
    script.
        const timer = {
            remainingTime: {
                total: 0,
                hours: 0,
                minutes: 0,
                seconds: 0
            }
        }

        const mainButton = document.getElementById('js-btn');
        mainButton.addEventListener('click', () => {
            const { action } = mainButton.dataset;
            if (action == 'start') {
                startTimer();
            } else {
                stopTimer();
            }
        });

        const alarmSound = new Audio('break.mp3');

        let interval;

        //Updates the clock in the HTML with the remaining time
        function updateClock() {
            const { remainingTime } = timer;

            const hours = `${remainingTime.hours}`.padStart(2, '0');
            const minutes = `${remainingTime.minutes}`.padStart(2, '0');
            const seconds = `${remainingTime.seconds}`.padStart(2, '0');

            const hr = document.getElementById('timer-hours');
            const min = document.getElementById('timer-minutes');
            const sec = document.getElementById('timer-seconds');

            hr.textContent = hours;
            min.textContent = minutes;
            sec.textContent = seconds;
        }

        //Calcualtes the difference between end and current time and splits it into hours, minutes and seconds
        function getRemainingTime(endTime) {
            const currentTime = Date.parse(new Date());
            const difference = endTime - currentTime;

            const total = Number.parseInt(difference / 1000, 10);
            const hours = Number.parseInt(Math.floor(total / 3600), 10);
            const minutes = Number.parseInt(Math.floor((total % 3600) / 60), 10);
            const seconds = Number.parseInt(total % 60);

            return {
                total,
                hours,
                minutes,
                seconds
            };
        }

        //Gets the input from the HTML form and starts the timer
        function startTimer() {
            timer.remainingTime = {
                total: document.getElementById('hours').value * 60 * 60 + document.getElementById('minutes').value * 60,
                hours: document.getElementById('hours').value,
                minutes: document.getElementById('minutes').value,
                seconds: 0
            }

            mainButton.dataset.action = 'stop';
            mainButton.textContent = 'stop';

            let { total } = timer.remainingTime;
            const endTime = Date.parse(new Date()) + total * 1000;

            interval = setInterval(function () {
                timer.remainingTime = getRemainingTime(endTime);
                updateClock();

                total = timer.remainingTime.total;
                if (total <= 0) {
                    alarmSound.play();
                    stopTimer();
                }
            }, 1000);
        }

        function stopTimer() {
            clearInterval(interval);
            
            mainButton.dataset.action = 'start';
            mainButton.textContent = 'start';
            
            timer.remainingTime = {
                total: 0,
                hours: 0,
                minutes: 0,
                seconds: 0
        }}